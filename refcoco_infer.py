# -*- coding: utf-8 -*-
"""Refcoco_infer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AHQNRdaUpRTgr3XySHSlba8aXwBAjwPB

# **OFA**
Start to enjoy visual grounding with OFA!
"""

# Commented out IPython magic to ensure Python compatibility.
# clone OFA if there does not exist the repo
# % cd /content
# ! git clone https://github.com/OFA-Sys/OFA.git

"""## **Download Checkpoint**
We provide a link for our public checkpoint, and you only need to wget it to your workspace. We also provide an alternative below. Choose one as you like!
"""

# Commented out IPython magic to ensure Python compatibility.
# % cd /content
# ! mkdir -p /content/OFA/checkpoints/
# ! wget https://ofa-silicon.oss-us-west-1.aliyuncs.com/checkpoints/refcocog_large_best.pt
# ! mv refcocog_large_best.pt OFA/checkpoints/refcocog.pt

"""## **Install Fairseq**
We advise you to install fairseq by cloning the official repository and running "pip install". 

You should restart the window if you meet the hint of "RESTART RUNTIME". 
"""

# Commented out IPython magic to ensure Python compatibility.
# clone Fairseq for installation
# % cd /content
# ! git clone https://github.com/pytorch/fairseq.git
# # % cd /content/fairseq
# ! pip install --use-feature=in-tree-build ./

"""## **Preparation**
Below you just need to import required packages, and check whether to use GPU or FP16. 
"""

# Commented out IPython magic to ensure Python compatibility.
# % cd /content/OFA
# ! sed '1d' requirements.txt | xargs -I {} pip install {}
import torch
import numpy as np
from fairseq import utils,tasks
from fairseq import checkpoint_utils
from utils.eval_utils import eval_step
from tasks.mm_tasks.refcoco import RefcocoTask
from models.ofa import OFAModel
from PIL import Image

# Register refcoco task
tasks.register_task('refcoco', RefcocoTask)

# turn on cuda if GPU is available
use_cuda = torch.cuda.is_available()
# use fp16 only when GPU is available
use_fp16 = False

"""## **Build Model**
Below you can build your model and load the weights from the given checkpoint, and also build a generator. 
"""

# Load pretrained ckpt & config
overrides={"bpe_dir":"../../utils/BPE"}
models, cfg, task = checkpoint_utils.load_model_ensemble_and_task(
        utils.split_paths('../../checkpoints/refcoco_large_best.pt'),
        arg_overrides=overrides
    )

cfg.common.seed = 7
cfg.generation.beam = 5
cfg.generation.min_len = 4
cfg.generation.max_len_a = 0
cfg.generation.max_len_b = 4
cfg.generation.no_repeat_ngram_size = 3

# Fix seed for stochastic decoding
if cfg.common.seed is not None and not cfg.generation.no_seed_provided:
    np.random.seed(cfg.common.seed)
    utils.set_torch_seed(cfg.common.seed)

# Move models to GPU
for model in models:
    model.eval()
    if use_fp16:
        model.half()
    if use_cuda and not cfg.distributed_training.pipeline_model_parallel:
        model.cuda()
    model.prepare_for_inference_(cfg)

# Initialize generator
generator = task.build_generator(models, cfg.generation)

"""## **Preprocess**
We demonstrate the required transformation fucntions for preprocessing inputs.
"""

# Image transform
from torchvision import transforms
mean = [0.5, 0.5, 0.5]
std = [0.5, 0.5, 0.5]

patch_resize_transform = transforms.Compose([
    lambda image: image.convert("RGB"),
    transforms.Resize((cfg.task.patch_image_size, cfg.task.patch_image_size), interpolation=Image.BICUBIC),
    transforms.ToTensor(),
    transforms.Normalize(mean=mean, std=std),
])

# Text preprocess
bos_item = torch.LongTensor([task.src_dict.bos()])
eos_item = torch.LongTensor([task.src_dict.eos()])
pad_idx = task.src_dict.pad()
def encode_text(text, length=None, append_bos=False, append_eos=False):
    s = task.tgt_dict.encode_line(
        line=task.bpe.encode(text.lower()),
        add_if_not_exist=False,
        append_eos=False
    ).long()
    if length is not None:
        s = s[:length]
    if append_bos:
        s = torch.cat([bos_item, s])
    if append_eos:
        s = torch.cat([s, eos_item])
    return s

# Construct input for refcoco task
patch_image_size = cfg.task.patch_image_size
def construct_sample(image: Image, text: str):
    w, h = image.size
    w_resize_ratio = torch.tensor(patch_image_size / w).unsqueeze(0)
    h_resize_ratio = torch.tensor(patch_image_size / h).unsqueeze(0)
    patch_image = patch_resize_transform(image).unsqueeze(0)
    patch_mask = torch.tensor([True])
    src_text = encode_text(' which region does the text " {} " describe?'.format(text), append_bos=True, append_eos=True).unsqueeze(0)
    src_length = torch.LongTensor([s.ne(pad_idx).long().sum() for s in src_text])
    sample = {
        "id":np.array(['42']),
        "net_input": {
            "src_tokens": src_text,
            "src_lengths": src_length,
            "patch_images": patch_image,
            "patch_masks": patch_mask,
        },
        "w_resize_ratios": w_resize_ratio,
        "h_resize_ratios": h_resize_ratio,
        "region_coords": torch.randn(1, 4)
    }
    return sample
  
# Function to turn FP32 to FP16
def apply_half(t):
    if t.dtype is torch.float32:
        return t.to(dtype=torch.half)
    return t

"""## **Run Inference**
Download an image and run the following scripts to generate the result.
"""

# Download an image from COCO or you can use other images with wget
# wget https://ofa-silicon.oss-us-west-1.aliyuncs.com/datasets/refcoco/pokemon.jpg
# mv pokemon.jpg  test.jpg
image = Image.open('../../pokemon.jpg')
text = "a blue turtle-like pokemon with round head"

# Construct input sample & preprocess for GPU if cuda available
sample = construct_sample(image, text)
sample = utils.move_to_cuda(sample) if use_cuda else sample
sample = utils.apply_to_sample(apply_half, sample) if use_fp16 else sample

# Run eval step for refcoco
with torch.no_grad():
    result, scores, lprob = eval_step(task, generator, models, sample)

import cv2
import numpy as np
import os
# from google.colab.patches import cv2_imshow
#
# img = cv2.cvtColor(numpy.asarray(image), cv2.COLOR_RGB2BGR)
# cv2.rectangle(
#     img,
#     (int(result[0]["box"][0]), int(result[0]["box"][1])),
#     (int(result[0]["box"][2]), int(result[0]["box"][3])),
#     (0, 255, 0),
#     3
# )
# cv2_imshow(img)

scores_lin_prob = np.exp(lprob)
print("SoftMax score of the decoder", lprob, lprob.sum())
# caption = result[0]['caption']
# print('Caption: {}'.format(caption))
caption = text
window_name = 'Image'
# img = cv2.cvtColor(np.asarray(image), cv2.COLOR_RGB2BGR)
image = np.array(image)
img = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
normalizedImg = np.zeros_like(img)
normalizedImg = cv2.normalize(img, normalizedImg, 0, 255, cv2.NORM_MINMAX)
img = normalizedImg.astype('uint8')

image = cv2.rectangle(
    img,
    (int(result[0]["box"][0]), int(result[0]["box"][1])),
    (int(result[0]["box"][2]), int(result[0]["box"][3])),
    (0, 255, 0),
    3
)
# print(caption)
movie_id = '111'
mdf = '-1'
path = '../../results'
file = 'pokemon'
cv2.imshow(window_name, img)

cv2.setWindowTitle(window_name, str(movie_id) + '_mdf_' + str(mdf) + '_' + caption + '_ prob_' + str(
    scores_lin_prob[0].__format__('.3f')))
cv2.putText(image, file + '_ prob_' + str(lprob.sum().__format__('.3f')) + str(lprob),
            fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=0.5, color=(0, 0, 255), thickness=2,
            lineType=cv2.LINE_AA, org=(10, 40))
fname = str(file) + '_' + str(caption) + '.png'
cv2.imwrite(os.path.join(path, fname),
            image)  # (image * 255).astype(np.uint8))#(inp * 255).astype(np.uint8))

